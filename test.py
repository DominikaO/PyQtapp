# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import PyQt5
from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
from PyQt5.QtCore import pyqtSlot
import os
from preprocessing import *
from PyQt5.QtWidgets import QFileDialog, QVBoxLayout, QLabel, QListWidgetItem, QListWidget
import arrayfire as af
import filters_arrayfire as at
import numpy as np

class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super(Ui_MainWindow, self).__init__(parent)
        self.counter = 0
        self.window_name = 'Image'
        self.init_img_path = None
        self.colored_img_arr = None
        self.active_img = None
        self.adjusted_img_array = None
        self.adjusted_img_array_prev = None
        self.save_dir = None
        self.selected_imgs_paths = []
        self.initial_img_arr = None
        self.used_filters = {"current": [], "last": []}
        # *********************** IMPORT / EXPORT list **********************************
        self.filters = {"gb_width": {}, "gb_height": {}, "gb_sigma": {}, "it_type": {}, "it_method": {},
                        "it_max_value": {}, "it_threshold": {}, "it_block_size": {}, "it_c_value": {},
                        "ce_threshold_1": {}, "ce_threshold_2": {}, "dil_width": {}, "dil_height": {},
                        "dil_iterations": {}, "ero_width": {}, "ero_height": {}, "ero_iterations": {}}
        self.json_loaded_filters = {}
        self.qlist = None
        self.filters2 = {}
        self.json_loaded_filters2 = {}
        self.select_filter_window = None
        '''self.filters["gaussian_blur"] = {"gb_width": {}, "gb_height": {},  "gb_sigma": {}}
        self.filters["image_thresholding"] = {"it_type": {}, "it_method": {}, "it_max_value": {}, "it_threshold": {},
                                              "it_block_size": {}, "it_c_value": {}}
        self.filters["canny_edge"] = {"ce_threshold_1": {}, "ce_threshold_2": {}}
        self.filters["dilatation"] = {"dil_width": {}, "dil_height": {}, "dil_iterations": {}}
        self.filters["erosion"] = {"ero_width": {}, "ero_height": {}, "ero_iterations": {}}'''
        #self.gaussian_blur = {"gb_width": [], "gb_height": [],  "gb_sigma": []}
        #self.image_thresholding = {"it_type": [], "it_method": [], "it_max_value": [], "it_threshold": [], "it_block_size": [], "it_c_value": []}
        #self.canny_edge = {"ce_threshold_1": [], "ce_threshold_2": []}
        #self.dilatation = {"dil_width": [], "dil_height": [], "dil_iterations": []}
        #self.erosion = {"ero_width": [], "ero_height": [], "ero_iterations": []}

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(803, 702)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 40, 161, 80))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(5, 5, 5, 5)
        self.verticalLayout.setObjectName("verticalLayout")
        # select & save images
        self.btn_select_imgs = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.btn_select_imgs.setObjectName("btn_select_imgs")
        self.verticalLayout.addWidget(self.btn_select_imgs)
        self.btn_save_imgs = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.btn_save_imgs.setObjectName("btn_save_imgs")
        self.verticalLayout.addWidget(self.btn_save_imgs)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 0, 791, 31))
        self.label.setObjectName("label")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(170, 40, 160, 80))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.radioBtn_orig = QtWidgets.QRadioButton(self.verticalLayoutWidget_2)
        self.radioBtn_orig.setObjectName("radioBtn_orig")
        self.verticalLayout_2.addWidget(self.radioBtn_orig)
        self.radioBtn_prep = QtWidgets.QRadioButton(self.verticalLayoutWidget_2)
        self.radioBtn_prep.setObjectName("radioBtn_prep")
        self.verticalLayout_2.addWidget(self.radioBtn_prep)
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(340, 40, 160, 80))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.btn_undo = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.btn_undo.setObjectName("btn_undo")
        self.verticalLayout_3.addWidget(self.btn_undo)
        self.btn_reset = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.btn_reset.setObjectName("btn_reset")
        self.verticalLayout_3.addWidget(self.btn_reset)
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 140, 271, 251))
        self.groupBox.setObjectName("groupBox")
        self.gridLayoutWidget = QtWidgets.QWidget(self.groupBox)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 50, 241, 161))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        #gaussian blur buttons
        #todo upravit sliders
        self.vs_gb_height = QtWidgets.QSlider(self.gridLayoutWidget)
        self.vs_gb_height.setMaximumSize(QtCore.QSize(15, 150))
        self.vs_gb_height.setMaximum(15)
        self.vs_gb_height.setOrientation(QtCore.Qt.Vertical)
        self.vs_gb_height.setObjectName("vs_gb_height")
        self.gridLayout.addWidget(self.vs_gb_height, 4, 2, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 3, 0, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_3.setMaximumSize(QtCore.QSize(16777215, 25))
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 3, 2, 1, 1)
        '''self.vs_gb_sigma = QtWidgets.QSlider(self.gridLayoutWidget)
        self.vs_gb_sigma.setMaximumSize(QtCore.QSize(15, 150))
        self.vs_gb_sigma.setMaximum(20)
        self.vs_gb_sigma.setOrientation(QtCore.Qt.Vertical)
        self.vs_gb_sigma.setObjectName("vs_gb_sigma")
        self.gridLayout.addWidget(self.vs_gb_sigma, 4, 4, 1, 1)'''
        self.label_7 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_7.setObjectName("label_7")
        self.gridLayout.addWidget(self.label_7, 4, 1, 1, 1)
        '''self.label_9 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_9.setObjectName("label_9")
        self.gridLayout.addWidget(self.label_9, 4, 5, 1, 1)'''
        self.vs_gb_width = QtWidgets.QSlider(self.gridLayoutWidget)
        self.vs_gb_width.setMaximumSize(QtCore.QSize(15, 150))
        self.vs_gb_width.setMaximum(15)
        self.vs_gb_width.setOrientation(QtCore.Qt.Vertical)
        self.vs_gb_width.setObjectName("vs_gb_width")
        self.gridLayout.addWidget(self.vs_gb_width, 4, 0, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 3, 4, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_8.setObjectName("label_8")
        self.gridLayout.addWidget(self.label_8, 4, 3, 1, 1)
        self.label_19 = QtWidgets.QLabel(self.groupBox)
        self.label_19.setGeometry(QtCore.QRect(110, 20, 47, 20))
        self.label_19.setObjectName("label_19")
        self.btn_apply_gaussian = QtWidgets.QPushButton(self.groupBox)
        self.btn_apply_gaussian.setGeometry(QtCore.QRect(60, 220, 131, 21))
        self.btn_apply_gaussian.setObjectName("btn_apply_gaussian")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(280, 140, 351, 251))
        self.groupBox_2.setObjectName("groupBox_2")
        self.comboBox_method = QtWidgets.QComboBox(self.groupBox_2)
        self.comboBox_method.setGeometry(QtCore.QRect(60, 20, 111, 21))
        self.comboBox_method.setObjectName("comboBox_method")
        self.comboBox_method.addItem("")
        self.comboBox_method.addItem("")
        self.comboBox_method.addItem("")
        self.comboBox_method.addItem("")
        self.comboBox_method.addItem("")
        self.comboBox_method.addItem("")
        self.comboBox_method.addItem("")
        '''self.comboBox_type = QtWidgets.QComboBox(self.groupBox_2)
        self.comboBox_type.setGeometry(QtCore.QRect(220, 20, 111, 21))
        self.comboBox_type.setObjectName("comboBox_type")
        self.comboBox_type.addItem("")
        self.comboBox_type.addItem("")'''
        self.label_4 = QtWidgets.QLabel(self.groupBox_2)
        self.label_4.setGeometry(QtCore.QRect(10, 20, 51, 21))
        self.label_4.setObjectName("label_4")
        self.label_10 = QtWidgets.QLabel(self.groupBox_2)
        self.label_10.setGeometry(QtCore.QRect(180, 20, 41, 21))
        self.label_10.setObjectName("label_10")
        self.gridLayoutWidget_2 = QtWidgets.QWidget(self.groupBox_2)
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(10, 50, 331, 161))
        self.gridLayoutWidget_2.setObjectName("gridLayoutWidget_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.vs_it_block_size = QtWidgets.QSlider(self.gridLayoutWidget_2)
        self.vs_it_block_size.setMaximum(81)
        self.vs_it_block_size.setOrientation(QtCore.Qt.Vertical)
        self.vs_it_block_size.setObjectName("vs_it_block_size")
        self.gridLayout_2.addWidget(self.vs_it_block_size, 1, 4, 1, 1)
        self.label_13 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_13.setObjectName("label_13")
        self.gridLayout_2.addWidget(self.label_13, 1, 5, 1, 1)
        '''self.vs_it_threshold = QtWidgets.QSlider(self.gridLayoutWidget_2)
        self.vs_it_threshold.setMinimum(1)
        self.vs_it_threshold.setMaximum(255)
        self.vs_it_threshold.setOrientation(QtCore.Qt.Vertical)
        self.vs_it_threshold.setObjectName("vs_it_threshold")
        self.gridLayout_2.addWidget(self.vs_it_threshold, 1, 2, 1, 1)'''
        self.vs_it_c_value = QtWidgets.QSlider(self.gridLayoutWidget_2)
        self.vs_it_c_value.setMaximum(80)
        self.vs_it_c_value.setOrientation(QtCore.Qt.Vertical)
        self.vs_it_c_value.setObjectName("vs_it_c_value")
        self.gridLayout_2.addWidget(self.vs_it_c_value, 1, 6, 1, 1)
        '''self.label_12 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_12.setObjectName("label_12")
        self.gridLayout_2.addWidget(self.label_12, 1, 3, 1, 1)'''
        self.label_16 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_16.setObjectName("label_16")
        self.gridLayout_2.addWidget(self.label_16, 0, 5, 1, 1)
        '''self.vs_it_max_value = QtWidgets.QSlider(self.gridLayoutWidget_2)
        self.vs_it_max_value.setMinimum(1)
        self.vs_it_max_value.setMaximum(255)
        self.vs_it_max_value.setOrientation(QtCore.Qt.Vertical)
        self.vs_it_max_value.setObjectName("vs_it_max_value")
        self.gridLayout_2.addWidget(self.vs_it_max_value, 1, 0, 1, 1)
        self.label_11 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_11.setObjectName("label_11")
        self.gridLayout_2.addWidget(self.label_11, 1, 1, 1, 1)'''
        self.label_14 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_14.setObjectName("label_14")
        self.gridLayout_2.addWidget(self.label_14, 0, 1, 1, 1)
        self.label_15 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_15.setObjectName("label_15")
        self.gridLayout_2.addWidget(self.label_15, 0, 3, 1, 1)
        self.label_17 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_17.setObjectName("label_17")
        self.gridLayout_2.addWidget(self.label_17, 1, 7, 1, 1)
        self.label_18 = QtWidgets.QLabel(self.gridLayoutWidget_2)
        self.label_18.setObjectName("label_18")
        self.gridLayout_2.addWidget(self.label_18, 0, 7, 1, 1)
        self.btn_threshold = QtWidgets.QPushButton(self.groupBox_2)
        self.btn_threshold.setGeometry(QtCore.QRect(110, 220, 141, 21))
        self.btn_threshold.setObjectName("btn_threshold")
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 400, 201, 251))
        self.groupBox_3.setObjectName("groupBox_3")
        self.gridLayoutWidget_3 = QtWidgets.QWidget(self.groupBox_3)
        self.gridLayoutWidget_3.setGeometry(QtCore.QRect(10, 50, 181, 161))
        self.gridLayoutWidget_3.setObjectName("gridLayoutWidget_3")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.gridLayoutWidget_3)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_20 = QtWidgets.QLabel(self.gridLayoutWidget_3)
        self.label_20.setObjectName("label_20")
        self.gridLayout_3.addWidget(self.label_20, 1, 1, 1, 1)
        self.vs_ce_threshold_1 = QtWidgets.QSlider(self.gridLayoutWidget_3)
        self.vs_ce_threshold_1.setMaximum(100)
        self.vs_ce_threshold_1.setOrientation(QtCore.Qt.Vertical)
        self.vs_ce_threshold_1.setObjectName("vs_ce_threshold_1")
        self.gridLayout_3.addWidget(self.vs_ce_threshold_1, 1, 0, 1, 1)
        '''self.vs_ce_threshold_2 = QtWidgets.QSlider(self.gridLayoutWidget_3)
        self.vs_ce_threshold_2.setMaximum(500)
        self.vs_ce_threshold_2.setOrientation(QtCore.Qt.Vertical)
        self.vs_ce_threshold_2.setObjectName("vs_ce_threshold_2")
        self.gridLayout_3.addWidget(self.vs_ce_threshold_2, 1, 2, 1, 1)
        self.label_21 = QtWidgets.QLabel(self.gridLayoutWidget_3)
        self.label_21.setObjectName("label_21")
        self.gridLayout_3.addWidget(self.label_21, 1, 3, 1, 1)'''
        self.label_22 = QtWidgets.QLabel(self.gridLayoutWidget_3)
        self.label_22.setObjectName("label_22")
        self.gridLayout_3.addWidget(self.label_22, 0, 1, 1, 1)
        self.label_23 = QtWidgets.QLabel(self.gridLayoutWidget_3)
        self.label_23.setObjectName("label_23")
        self.gridLayout_3.addWidget(self.label_23, 0, 3, 1, 1)
        self.btn_apply_canny_edge = QtWidgets.QPushButton(self.groupBox_3)
        self.btn_apply_canny_edge.setGeometry(QtCore.QRect(60, 220, 75, 23))
        self.btn_apply_canny_edge.setObjectName("btn_apply_canny_edge")
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(250, 400, 251, 251))
        self.groupBox_4.setObjectName("groupBox_4")
        self.gridLayoutWidget_4 = QtWidgets.QWidget(self.groupBox_4)
        self.gridLayoutWidget_4.setGeometry(QtCore.QRect(10, 49, 218, 161))
        self.gridLayoutWidget_4.setObjectName("gridLayoutWidget_4")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.gridLayoutWidget_4)
        self.gridLayout_4.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.label_24 = QtWidgets.QLabel(self.gridLayoutWidget_4)
        self.label_24.setObjectName("label_24")
        self.gridLayout_4.addWidget(self.label_24, 1, 1, 1, 1)
        self.vs_kernel_width = QtWidgets.QSlider(self.gridLayoutWidget_4)
        self.vs_kernel_width.setMaximum(15)
        self.vs_kernel_width.setOrientation(QtCore.Qt.Vertical)
        self.vs_kernel_width.setObjectName("vs_kernel_width")
        self.gridLayout_4.addWidget(self.vs_kernel_width, 1, 0, 1, 1)
        self.vs_kernel_height = QtWidgets.QSlider(self.gridLayoutWidget_4)
        self.vs_kernel_height.setMaximum(15)
        self.vs_kernel_height.setOrientation(QtCore.Qt.Vertical)
        self.vs_kernel_height.setObjectName("vs_kernel_height")
        self.gridLayout_4.addWidget(self.vs_kernel_height, 1, 2, 1, 1)
        '''self.vs_kernel_iterations = QtWidgets.QSlider(self.gridLayoutWidget_4)
        self.vs_kernel_iterations.setMaximum(15)
        self.vs_kernel_iterations.setOrientation(QtCore.Qt.Vertical)
        self.vs_kernel_iterations.setObjectName("vs_kernel_iterations")
        self.gridLayout_4.addWidget(self.vs_kernel_iterations, 1, 4, 1, 1)
        self.label_26 = QtWidgets.QLabel(self.gridLayoutWidget_4)
        self.label_26.setObjectName("label_26")
        self.gridLayout_4.addWidget(self.label_26, 1, 5, 1, 1)'''
        self.label_25 = QtWidgets.QLabel(self.gridLayoutWidget_4)
        self.label_25.setObjectName("label_25")
        self.gridLayout_4.addWidget(self.label_25, 1, 3, 1, 1)
        self.label_27 = QtWidgets.QLabel(self.gridLayoutWidget_4)
        self.label_27.setObjectName("label_27")
        self.gridLayout_4.addWidget(self.label_27, 0, 1, 1, 1)
        self.label_28 = QtWidgets.QLabel(self.gridLayoutWidget_4)
        self.label_28.setObjectName("label_28")
        self.gridLayout_4.addWidget(self.label_28, 0, 3, 1, 1)
        self.label_29 = QtWidgets.QLabel(self.gridLayoutWidget_4)
        self.label_29.setObjectName("label_29")
        self.gridLayout_4.addWidget(self.label_29, 0, 5, 1, 1)
        self.btn_apply_dilatation = QtWidgets.QPushButton(self.groupBox_4)
        self.btn_apply_dilatation.setGeometry(QtCore.QRect(10, 220, 101, 21))
        self.btn_apply_dilatation.setObjectName("btn_apply_dilatation")
        self.btn_apply_erosion = QtWidgets.QPushButton(self.groupBox_4)
        self.btn_apply_erosion.setGeometry(QtCore.QRect(130, 220, 101, 21))
        self.btn_apply_erosion.setObjectName("btn_apply_erosion")
        self.label_30 = QtWidgets.QLabel(self.groupBox_4)
        self.label_30.setGeometry(QtCore.QRect(100, 20, 47, 14))
        self.label_30.setObjectName("label_30")
        self.verticalLayoutWidget_4 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_4.setGeometry(QtCore.QRect(510, 390, 211, 261))
        self.verticalLayoutWidget_4.setObjectName("verticalLayoutWidget_4")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_4)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.btn_import = QtWidgets.QPushButton(self.verticalLayoutWidget_4)
        self.btn_import.setObjectName("pushButton_3")
        self.verticalLayout_4.addWidget(self.btn_import)
        # self.listWidget = QtWidgets.QListWidget(self.verticalLayoutWidget_4)
        # self.listWidget.setObjectName("listWidget")
        # self.verticalLayout_4.addWidget(self.listWidget)
        self.btn_add = QtWidgets.QPushButton(self.verticalLayoutWidget_4)
        self.btn_add.setObjectName("btn_add")
        self.verticalLayout_4.addWidget(self.btn_add)
        self.btn_export = QtWidgets.QPushButton(self.verticalLayoutWidget_4)
        self.btn_export.setObjectName("pushButton_4")
        self.verticalLayout_4.addWidget(self.btn_export)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 803, 22))
        self.menubar.setObjectName("menubar")
        self.menuPreprocessing_app = QtWidgets.QMenu(self.menubar)
        self.menuPreprocessing_app.setObjectName("menuPreprocessing_app")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuPreprocessing_app.menuAction())

        self.retranslateUi(MainWindow)
        self.vs_gb_width.valueChanged['int'].connect(self.label_7.setNum)
        self.vs_gb_height.valueChanged['int'].connect(self.label_8.setNum)
        #self.vs_gb_sigma.valueChanged['int'].connect(self.label_9.setNum)
        #self.vs_it_max_value.valueChanged['int'].connect(self.label_11.setNum)
        #self.vs_it_threshold.valueChanged['int'].connect(self.label_12.setNum)
        self.vs_it_block_size.valueChanged['int'].connect(self.label_13.setNum)
        self.vs_it_c_value.valueChanged['int'].connect(self.label_17.setNum)
        self.vs_ce_threshold_1.valueChanged['int'].connect(self.label_20.setNum)
        #self.vs_ce_threshold_2.valueChanged['int'].connect(self.label_21.setNum)
        self.vs_kernel_width.valueChanged['int'].connect(self.label_24.setNum)
        self.vs_kernel_height.valueChanged['int'].connect(self.label_25.setNum)
        #self.vs_kernel_iterations.valueChanged['int'].connect(self.label_26.setNum)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # *********************** SETUP BTNS CLICKED ********************8
        self.btn_select_imgs.clicked.connect(lambda: self.getFileNames())
        self.btn_save_imgs.clicked.connect(lambda: self.save_active_img())
        self.btn_undo.clicked.connect(lambda: self.undo_last_change())
        self.btn_reset.clicked.connect(lambda: self.reset_image())
        self.btn_export.clicked.connect(lambda: self.export_params())
        self.btn_import.clicked.connect(lambda: self.import_params())
        self.btn_apply_dilatation.clicked.connect(lambda: self.apply_morph("dilation",0,0,False))
        self.btn_apply_erosion.clicked.connect(lambda: self.apply_morph("erosion", 0,0,False))
        self.btn_apply_gaussian.clicked.connect(lambda: self.apply_gaussian_blur(0,0,False))
        self.btn_apply_canny_edge.clicked.connect(lambda: self.apply_canny_edge(0,False))
        self.btn_threshold.clicked.connect(lambda: self.apply_threshold(int(0), int(0), int(0), False))
        self.radioBtn_orig.clicked.connect(lambda: self.change_img_preview(1))
        self.radioBtn_prep.clicked.connect(lambda: self.change_img_preview(2))
        self.btn_add.clicked.connect(lambda : self.apply_selected_filter_from_import())

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.btn_select_imgs.setText(_translate("MainWindow", "Select images"))
        self.btn_save_imgs.setText(_translate("MainWindow", "Save images"))
        self.label.setText(_translate("MainWindow", "Preprocessing application"))
        self.label_2.setText(_translate("MainWindow", "Preview mode"))
        self.radioBtn_orig.setText(_translate("MainWindow", "Original"))
        self.radioBtn_prep.setText(_translate("MainWindow", "Preprocessed"))
        self.btn_undo.setText(_translate("MainWindow", "Undo"))
        self.btn_reset.setText(_translate("MainWindow", "Reset"))
        self.groupBox.setTitle(_translate("MainWindow", "Gaussian Blur"))
        self.label_5.setText(_translate("MainWindow", "Width"))
        self.label_3.setText(_translate("MainWindow", "Height"))
        self.label_7.setText(_translate("MainWindow", "0"))
        #self.label_9.setText(_translate("MainWindow", "0"))
        #self.label_6.setText(_translate("MainWindow", "Sigma"))
        self.label_8.setText(_translate("MainWindow", "0"))
        self.label_19.setText(_translate("MainWindow", "Kernel"))
        self.btn_apply_gaussian.setText(_translate("MainWindow", "Apply Gaussian Blur"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Image Thresholding"))
        self.comboBox_method.setItemText(0, _translate("MainWindow", "Binary Inverse"))
        self.comboBox_method.setItemText(1, _translate("MainWindow", "Binary"))
        self.comboBox_method.setItemText(2, _translate("MainWindow", "Trunc"))
        '''self.comboBox_method.setItemText(3, _translate("MainWindow", "To Zero"))
        self.comboBox_method.setItemText(4, _translate("MainWindow", "To Zero Inverse"))
        self.comboBox_method.setItemText(5, _translate("MainWindow", "Otsu"))
        self.comboBox_method.setItemText(6, _translate("MainWindow", "Triangle"))
        self.comboBox_type.setItemText(0, _translate("MainWindow", "Gausian C"))
        self.comboBox_type.setItemText(1, _translate("MainWindow", "Mean C"))'''
        self.label_4.setText(_translate("MainWindow", "Method :"))
        #self.label_10.setText(_translate("MainWindow", "Type :"))
        self.label_13.setText(_translate("MainWindow", "0"))
        #self.label_12.setText(_translate("MainWindow", "0"))
        self.label_16.setText(_translate("MainWindow", "Block size"))
        #self.label_11.setText(_translate("MainWindow", "0"))
        #self.label_14.setText(_translate("MainWindow", "Max value"))
        #self.label_15.setText(_translate("MainWindow", "Threshold"))
        self.label_17.setText(_translate("MainWindow", "0"))
        self.label_18.setText(_translate("MainWindow", "C value"))
        self.btn_threshold.setText(_translate("MainWindow", "Apply Thresholding"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Canny Edge"))
        self.label_20.setText(_translate("MainWindow", "0"))
        #self.label_21.setText(_translate("MainWindow", "0"))
        self.label_22.setText(_translate("MainWindow", "Threshold 1"))
        #self.label_23.setText(_translate("MainWindow", "Threshold 2"))
        self.btn_apply_canny_edge.setText(_translate("MainWindow", "Apply canny "))
        self.groupBox_4.setTitle(_translate("MainWindow", "Dilate / Erode"))
        self.label_24.setText(_translate("MainWindow", "1"))
        #self.label_26.setText(_translate("MainWindow", "1"))
        self.label_25.setText(_translate("MainWindow", "1"))
        self.label_27.setText(_translate("MainWindow", "Width"))
        self.label_28.setText(_translate("MainWindow", "Height"))
        #self.label_29.setText(_translate("MainWindow", "Iterations"))
        self.btn_apply_dilatation.setText(_translate("MainWindow", "Apply Dilatation"))
        self.btn_apply_erosion.setText(_translate("MainWindow", "Apply Erosion"))
        self.label_30.setText(_translate("MainWindow", "Kernel"))
        self.btn_export.setText(_translate("MainWindow", "EXPORT PARAMS"))
        self.btn_add.setText(_translate("MainWindow", "APPLY / ADD SELECTED FILTER"))
        self.btn_import.setText(_translate("MainWindow", "IMPORT PARAMS"))
        self.menuPreprocessing_app.setTitle(_translate("MainWindow", "Preprocessing app"))

    # ********************************** FUNCTIONS FOR BUTTONS *****************************************


    def getFileNames(self):
        filter = 'Data File (*.jpeg *.jpg *.tif);; Picture File (*.jpeg *.jpg)'
        response = QFileDialog.getOpenFileNames(
            parent=MainWindow,
            caption='Select a data file',
            directory=os.getcwd(),
            filter=filter,
        )
        if response:
            self.selected_imgs_paths = response[0]
            self.adjusted_img_array_prev = None
            self.image = cv2.imread(self.selected_imgs_paths[0])
            self.used_filters['current'] = []
            self.used_filters['last'] = []
            self.set_colored_img(self.image)
            self.set_grayscale_img(self.image)

            create_img_window(680, 700, 'Image')

            cv2.imshow(self.window_name, self.active_img)

        print(self.selected_imgs_paths)

    def set_initial_img(self, init_img_path):
        self.selected_imgs_paths = [init_img_path]
        self.initial_img_arr = cv2.imread(init_img_path)
        self.set_colored_img(self.initial_img_arr)
        self.set_grayscale_img(self.colored_img_arr)
        self.imgs_selected_text.set(f"Number of selected images: "
                                    f"{len(self.selected_imgs_paths)}")

    def change_img_preview(self, mod):
        if mod == 1:
            self.active_img = self.colored_img_arr
            cv2.imshow(self.window_name, self.active_img)
        if mod == 2:
            self.active_img = self.adjusted_img_array
            cv2.imshow(self.window_name, self.active_img)

    def undo_last_change(self):
        if self.adjusted_img_array_prev is not None:
            tmp_adj_img_array = self.adjusted_img_array
            self.adjusted_img_array = self.adjusted_img_array_prev
            self.adjusted_img_array_prev = tmp_adj_img_array
            tmp_current_filters = self.used_filters['current'].copy()
            self.used_filters['current'] = self.used_filters['last'].copy()
            self.used_filters['last'] = tmp_current_filters
        if self.radioBtn_prep.isChecked():
            self.active_img = self.adjusted_img_array
        cv2.imshow(self.window_name, self.active_img)

    def reset_image(self):
        self.adjusted_img_array_prev = self.adjusted_img_array
        self.used_filters['last'] = self.used_filters['current'].copy()
        self.set_grayscale_img(self.colored_img_arr)
        self.used_filters['current'] = self.used_filters['current'][0:1]
        if self.radioBtn_prep.isChecked():
            self.active_img = self.adjusted_img_array
        cv2.imshow(self.window_name, self.active_img)

    def set_colored_img(self, new_img_arr):
        self.colored_img_arr = new_img_arr
        self.active_img = self.colored_img_arr

    def set_grayscale_img(self, new_colored_img_arr):
        grayscale_fn = lambda img_array: cv2.cvtColor(img_array,
                                                      cv2.COLOR_BGR2GRAY)
        self.adjusted_img_array = grayscale_fn(new_colored_img_arr)
        self.used_filters['last'] = self.used_filters['current'].copy()
        self.used_filters['current'].append(grayscale_fn)

    def apply_morph(self, morph, width, height, imported):
        self.adjusted_img_array_prev = self.adjusted_img_array
        if (imported == True):
            kernel_width = width
            kernel_height = height
            iterations = 0
        else:
            kernel_width = int(self.vs_kernel_width.value())
            kernel_height = int(self.vs_kernel_height.value())
            iterations = 0

        #kernel = np.ones((kernel_height, kernel_width), np.uint8)
        kernel = af.np_to_af_array(np.ones((kernel_height, kernel_width), np.uint8))
        if morph == "erosion":
            self.filters2[str(self.counter)] = {"erosion": {"width": kernel_width, "height": kernel_height,
                                                "iterations": iterations}}
            self.filters.get("ero_width")[str(self.counter)] = kernel_width
            self.filters.get("ero_height")[str(self.counter)] = kernel_height
            #self.filters.get("ero_iterations")[str(self.counter)] = iterations
            erosion_fn = lambda img_array: \
                af.image.erode(img_array, kernel)
            #self.adjusted_img_array = erosion_fn(self.adjusted_img_array)
            self.adjusted_img_array = af.Array.to_ndarray(erosion_fn(af.np_to_af_array(self.adjusted_img_array)))
            self.used_filters['last'] = self.used_filters['current'].copy()
            self.used_filters['current'].append(erosion_fn)
        elif morph == "dilation":
            self.filters2[str(self.counter)] = {"dilation": {"width": kernel_width, "height": kernel_height,
                                                             "iterations": iterations}}
            self.filters.get("dil_width")[str(self.counter)]=kernel_width
            self.filters.get("dil_height")[str(self.counter)]=kernel_height
            #self.filters.get("dil_iterations")[str(self.counter)]=iterations
            dilation_fn = lambda img_array: \
                af.image.dilate(img_array, mask=kernel)
            #self.adjusted_img_array = dilation_fn(self.adjusted_img_array)
            self.adjusted_img_array = af.Array.to_ndarray(dilation_fn(af.np_to_af_array(self.adjusted_img_array)))
            self.used_filters['last'] = self.used_filters['current'].copy()
            self.used_filters['current'].append(dilation_fn)
        self.update_img()
        cv2.imshow(self.window_name, self.active_img)
        self.counter += 1
        # self.img_mode_choice.set(2)

    def update_img(self):
        self.active_img = self.adjusted_img_array

    def apply_canny_edge(self, threshold1, imported):
        self.adjusted_img_array_prev = self.adjusted_img_array
        if not imported:
            threshold1 = int(self.vs_ce_threshold_1.value())
            threshold2 = 0#int(self.vs_ce_threshold_2.value())
        self.filters2[self.counter] = {"canny edge": {"threshold 1": threshold1, "threshold 2": threshold2}}
        self.filters.get("ce_threshold_1")[str(self.counter)] = threshold1
        self.filters.get("ce_threshold_2")[str(self.counter)] = threshold2
        # self.filters["ce_th2"].append(threshold2)
        canny_fn = lambda img_array: cv2.Canny(img_array, threshold1, threshold2)
        cv2.imwrite('save.jpg', self.adjusted_img_array)
        af_img = af.image.load_image('save.jpg', True)
        im = at.adaptive_canny(af_img, threshold1/100)
        af.image.save_image(im, 'save.jpg')
        self.adjusted_img_array = cv2.imread('save.jpg', 1)
        self.used_filters['last'] = self.used_filters['current'].copy()
        self.used_filters['current'].append(canny_fn)
        self.update_img()
        cv2.imshow(self.window_name, self.active_img)
        self.counter += 1
        # todo mode_choice
        # self.img_mode_choice.set(2)

    def apply_threshold(self, th_method, it_block_size, it_c_value, imported):
        # THRESH_BINARY = 0
        # THRESH_BINARY_INV = 1
        # THRESH_TRUNC = 2
        self.adjusted_img_array_prev = self.adjusted_img_array
        if not imported:
            th_method = int(self.comboBox_method.currentIndex())
            th_type = 0
            it_max_value = 0
            it_threshold = 0
            it_block_size = int(self.vs_it_block_size.value())
            it_c_value = int(self.vs_it_c_value.value())
        self.filters2[self.counter] = {"image thresholding": {"type": th_type, "method": th_method,
                                                              "max value": it_max_value,
                                                              "threshold": it_threshold,
                                                              "block size": it_block_size,
                                                              "c value": it_c_value}}
        #self.filters["it_type"][str(self.counter)] = th_type
        self.filters["it_method"][str(self.counter)] = th_method
        #self.filters["it_max_value"][str(self.counter)] = it_max_value
        #self.filters["it_threshold"][str(self.counter)] = it_threshold
        self.filters["it_block_size"][str(self.counter)] = it_block_size
        self.filters["it_c_value"][str(self.counter)] = it_c_value
        max_value = int(self.vs_it_max_value.value())
        af.set_backend('cpu') #todo it can be deleted but macs openCL doesnt support doubles
        cv2.imwrite('save.jpg', self.adjusted_img_array)
        af_img = af.image.load_image('save.jpg', True)
        im = at.adaptive_threshold(af_img, th_type, it_block_size, it_c_value)
        self.adjusted_img_array = af.Array.to_ndarray(im)
        # otsu
        if th_type == 5:
            th_type = 8
        # triangle
        elif th_type == 6:
            th_type = 16
        # if pixel has higher than threshold value = pixel will be 255 (white)
        if th_type == 0 or th_type == 1:
            at_fn = lambda img_array: \
                cv2.adaptiveThreshold(img_array, it_max_value,
                                      th_method, th_type,
                                      it_block_size,
                                      it_c_value)
            #self.adjusted_img_array = at_fn(self.adjusted_img_array)
        else:
            at_fn = lambda img_array: \
                cv2.threshold(img_array, int(self.vs_it_threshold.value()),
                              it_max_value, cv2.THRESH_BINARY + th_type)
            #th, self.adjusted_img_array = at_fn(self.adjusted_img_array)
        self.update_img()
        self.used_filters['last'] = self.used_filters['current'].copy()
        self.used_filters['current'].append(at_fn)
        # self.img_mode_choice.set(2)
        cv2.imshow(self.window_name, self.active_img)
        self.counter += 1

    def apply_gaussian_blur(self, width, height, imported):
        self.adjusted_img_array_prev = self.adjusted_img_array
        if (imported == True):
            kernel_width = width
            kernel_height = height
            sigma = 0
        else:
            kernel_width = int(self.vs_gb_width.value())
            kernel_height = int(self.vs_gb_height.value())
            sigma = 0
        self.filters2[str(self.counter)] = {"gaussian blur": {"width": kernel_width, "height": kernel_height,
                                                                  "sigma": sigma}}
        self.filters["gb_width"][str(self.counter)] = kernel_width
        self.filters["gb_height"][str(self.counter)] = kernel_height
        self.filters["gb_sigma"][str(self.counter)] = sigma
        gb_fn = lambda img_array: \
            cv2.GaussianBlur(img_array, (kernel_width, kernel_height), sigma)
        #self.adjusted_img_array = gb_fn(self.adjusted_img_array)
        cv2.imwrite('save.jpg', self.adjusted_img_array)
        af_img = af.image.load_image('save.jpg', True)
        im = at.adaptive_gaussian(af_img, kernel_height, kernel_width)
        af.image.save_image(im, 'save.jpg')
        self.adjusted_img_array = cv2.imread('save.jpg', 1)
        self.used_filters['last'] = self.used_filters['current'].copy()
        self.used_filters['current'].append(gb_fn)
        self.update_img()
        #todo
        #self.img_mode_choice.set(2)
        cv2.imshow(self.window_name, self.active_img)
        self.counter += 1

    def import_params(self):
        # todo neviem otvorit ten subor vzbratz cez path
        self.read_json()
        list_from_json = self.json_to_list()
        if self.select_filter_window is None:
            self.select_filter_window = AnotherWindow()
            self.select_filter_window.set_json_list(list_from_json)
            self.select_filter_window.list_to_list_widget()
            self.select_filter_window.show()
        self.select_filter_window.show()

        #self.select_filter_window.list_from_json(list)
        #self.curr_sel_fil = self.select_filter_window.list_widget.currentRowChanged.connect(lambda: self.select_filter_window.get_selected_filter())

    def read_json(self):
        filter2 = 'Data File (*.json)'
        response = QFileDialog.getOpenFileName(
            parent=MainWindow,
            caption='Select a data file',
            directory=os.getcwd(),
            filter=filter2,
        )
        #print(response[0])
        #print(response)
        if response:
            with open(response[0]) as file:
                self.json_loaded_filters2 = json.load(file)
        #print(self.json_loaded_filters2)

    def json_to_list(self):
        strings = []
        for item in self.json_loaded_filters2.values():
            string = ""
            for filter in item:
                string += str(filter) + ", params: "
                for param in item.get(filter):
                    string += str(param) + " = " + str(item.get(filter).get(param)) + ", "
                strings.append(string)
                print(string)
        return strings

    def set_sel_param(self, param):
        self.sel_param = param

    #todo
    #def apply_json_filters(self):

    def export_params(self):
        print(self.filters2)
        json_filters2 = json.dumps(self.filters2)
        file = open("filters2.json", "w")
        file.write(json_filters2)
        file.close()
        #self.sel_param = self.select_filter_window.get_selected_filter()
       # print(str(self.sel_param))

    def save_active_img(self):
        preprocessed_imgs = []
        path = QFileDialog.getExistingDirectory(
            self,
            caption='Select a folder'
        )
        c = 0
        for img_filename in self.selected_imgs_paths:
            preprocessed = self.apply_filters_to_img(img_filename)
            preprocessed_imgs.append(preprocessed)
            # result = cv2.imwrite(path + img_filename + "_PREPROCESSED.jpg", preprocessed)
            result = cv2.imwrite(path + "\\image" + str(c) + "_PREPROCESSED.jpg", preprocessed)
            if result == True:
                print("Files saved successfully")
            else:
                print("Files saved unsuccessfully")
            c += 1

    def apply_filters_to_img(self, img_path):
        img = cv2.imread(img_path)
        for filter_fn in self.used_filters['current']:
            img = filter_fn(img)
            # some thresholding methods return tuple with threshold value
            # we want just the image
            if type(img) is tuple:
                img = img[1]
        return img

    def apply_selected_filter_from_import(self):
        self.sel_param = self.select_filter_window.get_selected_filter()
        selected =self.json_loaded_filters2.get(str(self.sel_param))
        for filter in selected:
            name = filter
            if (filter == "gaussian blur"):
                width = selected.get(filter).get("width")
                height = selected.get(filter).get("height")
                sigma = selected.get(filter).get("sigma")
                self.apply_gaussian_blur(width,height,sigma,True)
            if (filter == "erosion" or filter == "dilation"):
                width = selected.get(filter).get("width")
                height = selected.get(filter).get("height")
                iterations = selected.get(filter).get("iterations")
                self.apply_morph(filter,width,height,iterations,True)
            if (filter == "canny edge"):
                threshold1 = selected.get(filter).get("threshold 1")
                threshold2 = selected.get(filter).get("threshold 2")
                self.apply_canny_edge(threshold1,threshold2,True)
            if (filter == "image thresholding"):
                type = selected.get(filter).get("type")
                method = selected.get(filter).get("method")
                max_value = selected.get(filter).get("max value")
                threshold= selected.get(filter).get("threshold")
                block_size= selected.get(filter).get("block size")
                c_value= selected.get(filter).get("c value")
                self.apply_threshold(
                    self.apply_threshold(int(type), int(method), int(max_value),int(threshold) , int(block_size), int(c_value), True))


    def create_img_window(width=680, height=700, name='Image'):
        cv2.namedWindow(name, cv2.WINDOW_NORMAL | cv2.WINDOW_KEEPRATIO)
        cv2.resizeWindow(name, width, height)

class AnotherWindow(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Filter selection ")
        self.setGeometry(100, 100, 700, 700)

        self.list_from_json = []
        self.list_widget = QListWidget(self)
        self.list_widget.setGeometry(50, 70, 400, 400)
        self.label = QLabel(self)
        self.label.setGeometry(460, 80, 500, 80)
        self.label.setWordWrap(True)
        self.index = None



        # self.list_widget.currentRowChanged.connect(
        #     lambda: self.label.setText("selected: " + str(self.list_widget.currentIndex().row())))

        self.list_widget.currentRowChanged.connect(
            lambda: self.label.setText("selected: " + str(self.list_widget.currentItem().text())))


        # '''self.get_json_list()
        # self.list_to_list_widget()
        #
        # self.show()'''

    # todo list_from_json
    def get_json_list(self):
        for i in range(3):
            self.list_from_json.append(QListWidgetItem(str(i)))

    def set_json_list(self, json_list):
        self.list_from_json = json_list

    def list_to_list_widget(self):
        for item in self.list_from_json:
            self.list_widget.addItem(item)

    def get_selected_filter(self):
        print(str(self.list_widget.currentIndex().row()))
        self.set_index(int(self.list_widget.currentIndex().row()))
        return (int(self.list_widget.currentIndex().row()))
    @classmethod
    def get_index(self):
        return self.index

    @classmethod
    def set_index(self, index):
       self.index = index





if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
